<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.15">
  <POU Name="FB_BaseTelescopeControl" Id="{eddbf876-a986-4fe1-ba5b-16d782882b92}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ABSTRACT FB_BaseTelescopeControl IMPLEMENTS I_Telescope
VAR_INPUT
(*
TCS interface section
see https://gitlab.aip.de/bmk10k/telescope_firmware/snippets/5
*)
	bPower				: BOOL;		// true: Power on
	bGoHome				: BOOL;		// true: go to home position, unset track/goto if active
	bPark				: BOOL;		// boolean, true: go into park position, ready to stow telescope, unset track/goto
	bTrack				: BOOL;		// boolean, TRUE: MOVE telescope TO last ra/de AND start tracking. Set 'goto' TO FALSE, IF TRUE. FALSE: Stop tracking as soon as possible
	bGoto				: BOOL;		// boolean, TRUE: MOVE telescope TO tau/de AND stop there. Set track TO FALSE, IF TRUE. FALSE: no effect.)	
	bSlew				: BOOL;		// move the telescope to a given az-alt position
	bStop				: BOOL;		// boolean, TRUE: Stop motion OF telescope immediately, set goto AND track TO FALSE. FALSE: Allow motion OF telescope again via track/goto).	
	bReset				: BOOL;		// initiates reset on all axis
	bAutoTrack			: BOOL := TRUE;	// automatic tracking after goto
	fRightAscension		: LREAL :=  0.0;	// apparent right ascension, degrees, double	
	fDeclination		: LREAL :=  0.0;	// apparent declination, degrees, double
	fElevation			: LREAL :=  0.0;	// desired elevation of the telescope pointing
	fAzimuth			: LREAL :=  0.0;	// desired azimut of the telescope pointing
	fTimeOffset			: LREAL := 0.0;		// absolute offset for time
	fHorizon			: LREAL := 1.0;		// ELEVATION below which value the telescope will not go
	
	bEstopTriggered		: BOOL	:= FALSE;	// TODO: CHANGE
	bMainReady			: BOOL	:= TRUE;
	
	telescopeConfig		: ST_TelescopeConfig;
END_VAR
VAR
	fbComm 				: I_Comm;
	
	TCS_command			: E_TCSCommand;	// actual command from the TCS
	fJd					: LREAL;	// current Julian Date calculated from system time
	fLst				: LREAL;	// local siderial time calculated from Julian date in hours
	fElevationCalc		: LREAL;	// elevation calulated when ra and dec are set by TCS 
	fAzimuthCalc		: LREAL;	// azimuth calulated when ra and dec are set by TCS
	fHourAngle			: LREAL;	// hourangle when ra and dec are set by TCS
	
	fRightAscensionCalc	: LREAL;	// right ascension calulated when azimuth and elevation are set by TCS
	fDeclinationCalc	: LREAL;	// declination calulated when azimuth and elevation are set by TCS
	fHourAngleCalc		: LREAL;	// hour angle azimuth and elevation are set by TCS
	
	fbTime				: FB_AstroClock;	// precise astronomical	time
	
	rtrigReset			: R_TRIG;
	bInterrupted		: BOOL;		// If a command is interruped by one with more presedence, the interrupted needs to reset its stage
	
	bPowerFailure		: BOOL;		// triggers power-failure event
	tpPowerOnWarning	: TP;		// triggers power warning
	tonPowerTimeout		: TON;		// power on timeout
	tonCommandTimeout	: TON;		// command timeout
	tonTrackingDelay	: TON;		// tracking delay
	
	TCSpowerEvent,
	TCSgohomeEvent,
	TCSparkEvent,
	TCSgotoEvent,
	TCStrackEvent,
	TCSstopEvent,
	TCStargetHorizonEvent,
	TCSaltitudeEvent,
	TCSnearPoleEvent,
	TCSreadyEvent,
	TCSCTOEvent			: FB_Eventlog;
	tonMQTTTimer 			: TON := (PT:=T#5S);
	
	nStatusWord, nLastStatus:	UDINT;
END_VAR
VAR_OUTPUT
	bReady				: BOOL;		// TRUE, IF telescope can be operated 
	fReadyState 		: LREAL := 0.0; // 0: Shut down, 1 powered on, -1 Error
	bIsParked			: BOOL := TRUE;		// telescope is parked
	bIsPowered			: BOOL;		// telescope is powered on
	bError				: BOOL;		// indicates an error on one of the components
	bHorizonError		: BOOL;		// if TRUE, the set Coordinate is below the Horizon threshold fHorizon
	nErrorID				: UDINT;	//error id of axis
	nMotionState		: INT	:= 0;
	bSlewing			: BOOL;		//TRUE, IF telescope is in fast-MOVE phase (includes pole-swap)	
	bTracking			: BOOL;		//TRUE, IF telescope is on tracking position AND currently tracking.	
	bStopped			: BOOL;		//TRUE, IF telescope is AT rest.	
	fHourAngleCurrent	: LREAL;	// true position of the hour angle (without pointing and offset correction)
	fDeclinationCurrent	: LREAL;	// true position of the declination (without pointing and offset correction)
	fRightAscensionCurrent: LREAL;	// true position of the right ascension (without pointing and offset correction)
	fElevationCurrent	: LREAL;	// current position in elevation (calculated) (without pointing and offset correction)
	fAzimuthCurrent		: LREAL;	// current position in azimuth (calculated) (without pointing and offset correction)
	fElevationCurrentSky	: LREAL;	// current position in elevation (calculated)
	fAzimuthCurrentSky		: LREAL;	// current position in azimuth (calculated)
	fSlewTime			: LREAL;	//	(time in sec. to reach the goto/track position) 
	bHomed				: BOOL;		// True: telescope is calibrated
	bBusy				: BOOL;		// telescope does not accept further commands
END_VAR
VAR CONSTANT
	d2r		: LREAL := PI/180.0;
	fSiderialVelocity: LREAL := 360.0 / 86164.099;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// telemetry cadence depends on state
IF bSlewing OR bTracking THEN
	tonMQTTTimer.PT := T#1000MS;
ELSE
	tonMQTTTimer.PT := T#5000MS;
END_IF
tonMQTTTimer(IN:=TRUE);
IF tonMQTTTimer.Q THEN // publish new payload every second
	tonMQTTTimer(IN:=FALSE);
	_PublishTelemetry();
END_IF]]></ST>
    </Implementation>
    <Method Name="_PublishTelemetry" Id="{6dec3368-4b87-4c9c-96fd-ac4ed46b70ff}">
      <Declaration><![CDATA[METHOD _PublishTelemetry : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* TELESCOPE module*)

//fbComm.Publish('telescope', 'dome', 'TELESCOPE.READY_STATE',	LREAL_TO_STRING(fReadyState));
//fbComm.Publish('telescope', 'dome', 'TELESCOPE.Motion_STATE',	LREAL_TO_STRING(nMotionState));

// INFO
fbComm.Publish('telescope', 'dome', 'TELESCOPE.INFO.NAME',	'50cm');
fbComm.Publish('telescope', 'dome', 'TELESCOPE.INFO.DIAMETER',	'0.5');
fbComm.Publish('telescope', 'dome', 'TELESCOPE.INFO.CABINET',	'Beckhoff');
fbComm.Publish('telescope', 'dome', 'TELESCOPE.INFO.MANUFACTURER', 'Halfmann, Haidenhain, Beckhoff');

// CONFIG
fbComm.Publish('telescope', 'dome', 'TELESCOPE.CONFIG.CAPABILITIES', '0');
fbComm.Publish('telescope', 'dome', 'TELESCOPE.CONFIG.MOUNTOPTIONS', 'ALT-AZ');
fbComm.Publish('telescope', 'dome', 'TELESCOPE.CONFIG.MOUNT', 'ALT-AZ');

// STATUS
IF bEstopTriggered THEN
	fbComm.Publish('telescope', 'dome', 'TELESCOPE.STATUS.GLOBAL', '1');
ELSIF bError THEN
	fbComm.Publish('telescope', 'dome', 'TELESCOPE.STATUS.GLOBAL', '2');
ELSE
	fbComm.Publish('telescope', 'dome', 'TELESCOPE.STATUS.GLOBAL', '0');
END_IF
(* ERROR LIST: TO BE IMPLEMENTED!!!*)

(* OBJECT Module*)

// INSTRUMENTAL
// Set Coords from outside | GoTo:RA DEC | Slew:Alt Az
fbComm.Publish('telescope', 'dome', 'OBJECT.INSTRUMENTAL.RA', LREAL_TO_STRING(fRightAscension));
fbComm.Publish('telescope', 'dome', 'OBJECT.INSTRUMENTAL.DEC', LREAL_TO_STRING(fDeclination));
fbComm.Publish('telescope', 'dome', 'OBJECT.INSTRUMENTAL.ALT', LREAL_TO_STRING(fElevation));
fbComm.Publish('telescope', 'dome', 'OBJECT.INSTRUMENTAL.AZ', LREAL_TO_STRING(fAzimuth));

// HORIZONTAL
IF bSlew THEN
	fbComm.Publish('telescope', 'dome', 'OBJECT.HORIZONTAL.ALT', LREAL_TO_STRING(fElevation));
	fbComm.Publish('telescope', 'dome', 'OBJECT.HORIZONTAL.AZ', LREAL_TO_STRING(fAzimuth));
ELSE
	fbComm.Publish('telescope', 'dome', 'OBJECT.HORIZONTAL.ALT', LREAL_TO_STRING(fElevationCalc));
	fbComm.Publish('telescope', 'dome', 'OBJECT.HORIZONTAL.AZ', LREAL_TO_STRING(fAzimuthCalc));
END_IF

//EQUATORIAL
fbComm.Publish('telescope', 'dome', 'OBJECT.EQUATORIAL.EPOCH', 'J2000.0');
fbComm.Publish('telescope', 'dome', 'OBJECT.EQUATORIAL.EQUINOX', 'J2000.0');
fbComm.Publish('telescope', 'dome', 'OBJECT.EQUATORIAL.RA_PM', '0.0');
fbComm.Publish('telescope', 'dome', 'OBJECT.EQUATORIAL.DEC_PM', '0.0');
fbComm.Publish('telescope', 'dome', 'OBJECT.EQUATORIAL.RA_RATE', '0.0');
fbComm.Publish('telescope', 'dome', 'OBJECT.EQUATORIAL.DEC_RATE', '0.0');
IF bSlew THEN
	fbComm.Publish('telescope', 'dome', 'OBJECT.EQUATORIAL.RA', LREAL_TO_STRING(fRightAscensionCalc/15.0));
	fbComm.Publish('telescope', 'dome', 'OBJECT.EQUATORIAL.DEC', LREAL_TO_STRING(fDeclinationCalc));
ELSE
	fbComm.Publish('telescope', 'dome', 'OBJECT.EQUATORIAL.RA', LREAL_TO_STRING(fRightAscension/15.0));
	fbComm.Publish('telescope', 'dome', 'OBJECT.EQUATORIAL.DEC', LREAL_TO_STRING(fDeclination));
END_IF

(*POSITION*)
//LOCAL
fbComm.Publish('telescope', 'dome', 'POSITION.LOCAL.SIDEREAL_TIME', LREAL_TO_STRING(fLst));
fbComm.Publish('telescope', 'dome', 'POSITION.LOCAL.JD', LREAL_TO_STRING(fJd));
fbComm.Publish('telescope', 'dome', 'POSITION.LOCAL.LATITUDE', LREAL_TO_STRING(telescopeConfig.latitude));
fbComm.Publish('telescope', 'dome', 'POSITION.LOCAL.LONGITUDE', LREAL_TO_STRING(telescopeConfig.longitude));
fbComm.Publish('telescope', 'dome', 'POSITION.LOCAL.HEIGHT', LREAL_TO_STRING(telescopeConfig.altitude));
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Altitude" Id="{caafb587-dfec-4075-98b5-4e0c659dd422}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY Altitude : LREAL
]]></Declaration>
      <Get Name="Get" Id="{3eadfa0f-91b9-4d35-b2a2-3995bf1ad272}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Altitude := THIS^.fElevationCurrent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Azimuth" Id="{4ab08aee-62ef-436f-afb0-a92312153ecc}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY Azimuth : LREAL
]]></Declaration>
      <Get Name="Get" Id="{5db7deaa-4ebd-480d-94f2-987ee6c7533c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Azimuth := THIS^.fAzimuthCurrent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Declination" Id="{f1005b84-337c-4b64-b7ea-204360ce618d}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY Declination : LREAL
]]></Declaration>
      <Get Name="Get" Id="{f2fb9d57-e433-4c82-b5be-80f2fdab955e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Declination := THIS^.fDeclinationCurrent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{a32d2f32-4a31-4d05-8712-e937ed61ba13}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	comm			: I_Comm;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fbComm := comm;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Home" Id="{84524932-267e-412f-a6c3-40e991630e8d}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Home : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{3aef494f-7f4e-4344-8ab1-5311c283fa00}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Init : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bPower := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Park" Id="{621c0fc8-dd4d-44e7-85fe-cb7551b9d3ae}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Park : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bPark := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{3d17fa40-fd53-4e7d-b2aa-5ea6dd1055c0}">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bReset := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="RightAscension" Id="{479a6a93-35a2-4327-9015-03d6802f2b56}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY RightAscension : LREAL
]]></Declaration>
      <Get Name="Get" Id="{cd895a36-325d-498a-95c9-5d78816a7d56}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RightAscension := THIS^.fRightAscensionCurrent;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Slew" Id="{c9fecd44-6a6f-4a55-81c4-7243946a8163}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Slew : BOOL
VAR_INPUT
	fAzimuth		: LREAL;
	fAltitude		: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fAzimuth := fAzimuth;
THIS^.fElevation := fAltitude;
bSlew := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stop" Id="{8e159726-2715-4778-83ca-31c01953b46c}">
      <Declaration><![CDATA[{warning 'add method implementation '}
METHOD Stop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bStop := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Track" Id="{edf3f645-ab28-47ec-8a4c-398c458de728}">
      <Declaration><![CDATA[METHOD Track : BOOL
VAR_INPUT
	fRightAscension	: LREAL;
	fDeclination	: LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fRightAscension := fRightAscension;
THIS^.fDeclination := fDeclination;
bTrack := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_BaseTelescopeControl">
      <LineId Id="178" Count="0" />
      <LineId Id="169" Count="5" />
      <LineId Id="9" Count="0" />
      <LineId Id="234" Count="1" />
      <LineId Id="241" Count="0" />
      <LineId Id="233" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl._PublishTelemetry">
      <LineId Id="14" Count="58" />
      <LineId Id="78" Count="6" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.Altitude.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.Azimuth.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.Declination.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.FB_init">
      <LineId Id="7" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.Home">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.Init">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.Park">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.Reset">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.RightAscension.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.Slew">
      <LineId Id="7" Count="0" />
      <LineId Id="14" Count="1" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.Stop">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseTelescopeControl.Track">
      <LineId Id="15" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>